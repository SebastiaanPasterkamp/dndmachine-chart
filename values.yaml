# Default values for dndmachine.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: cromrots/dndmachine
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "unstable"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# The database backend configuration
database:
  # The type of database to connect to.
  # Can be one of 'sqlite' or 'mysql'
  type: sqlite
  # Configuration for database.type=mysql
  mysql:
    # Secret to mysql credentials
    secret: dndmachine-mysql
    # The host of the mysql service.
    host: # HOST
    hostKey: address
    # The port of the mysql service.
    port: # 3306
    portKey: port
    # The mysql username to use.
    username: # insecure
    usernameKey: username
    # The mysql password to use.
    password: # insecure
    passwordKey: password
    # The mysql database to use.
    database: # dndmachine
    databaseKey: database

  # Database connection settings
  connection:
    # The maximum amount of time a connection may be reused.
    connMaxLifetime: 15m
    # The maximum amount of idle connections in the pool.
    maxIdleConns: 3
    # The maximum amount of open connections to the database.
    maxOpenConns: 3
    # The maximum time a ping will wait for a response.
    pingTimeout: 3s

# Caching backend for session storage
cache:
  enabled: false
  # Secret to redis credentials
  secret: dndmachine-redis
  # The address of the redis cache service.
  addressKey: address
  address: # ...-redis-master:6379
  # The redis password to use.
  passwordKey: password
  password: # insecure
  # The redis database to use.
  databaseKey: database
  database: # 0

# Built in Redis cache backend
redis:
  enabled: false
  global:
    imageRegistry: "docker.io"
    storageClass: ""
  image:
    repository: redis
  auth:
    enabled: true
    existingSecret: dndmachine-redis
    existingSecretPasswordKey: "password"
  architecture: replication
  master:
    persistence:
      enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 1Gi
  replica:
    replicaCount: 2
    persistence:
      enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 1Gi

server:
  # The maximum duration of a request.
  requestTimeout: 30s
  # The maximum duration for reading the entire request, including the body.
  readTimeout: 5s
  # The amount of time allowed to read request headers
  readHeaderTimeout: 5s
  # The maximum duration before timing out writes of the response.
  writeTimeout: 5s
  # The maximum amount of time to wait for the next request when keep-alive is enabled.
  idleTimeout: 1m
  # The maximum time a shutdown is delayed to allow for a readiness probe to occur.
  # During this time all readiness probes will be unsuccessful, so no more traffic is
  # sent to the terminating service.
  maxShutdownDelay: 30s
  # The maximum grace time for a shutdown.
  shutdownDeadline: 5s

## Persistent Volume for SQLite backend
persistentVolume:
  ## If you are using SQLite as your storage backend, then it is recommended
  ##   to enable persistence. If enabled, the Chart will create a
  ##   PersistentVolumeClaim to store its state in.
  ## If set to false, an emptyDir is used instead, which is ephemeral.
  enabled: false

  ## If a PVC to persist the sqlite database is already available, pass the
  ##   name of the created and available PVC here.
  ## If set, this Chart will not create a PVC.
  existingClaim:

  ## The Persistent Volume Storage Class
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  storageClass: ""

  ## Persistent Volume access modes
  ## Must match those of existing PV or dynamic provisioner
  ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  accessModes:
    - ReadWriteMany

  ## SQLite data Persistent Volume size
  ##
  size: 100Mi

  ## SQLite Persistent Volume Binding Mode
  ## If defined, volumeMode: <volumeMode>
  ## If empty (the default) or set to null, no volumeBindingMode spec is
  ## set, choosing the default mode.
  ##
  volumeMode: ""

  # Annotations to add to the persistent volume claim
  annotations: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 2000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
